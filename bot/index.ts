// import 'dotenv/config'
import TelegramBot, { ReplyKeyboardMarkup, InlineKeyboardMarkup } from 'node-telegram-bot-api'
import mongoose from 'mongoose'
import cron from 'node-cron'
import setupCommands from './handlers/commands'
import { generatePlan } from './services/planGenerator'
import { createAdvice } from './services/aiAdvice'
import User from '../backend/models/User'

console.log('TG_TOKEN:', process.env.TG_TOKEN)
console.log('MONGO_URI:', process.env.MONGO_URI)
// TODO: –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å PAYMENT_PROVIDER_TOKEN –≤ .env
console.log('PAYMENT_PROVIDER_TOKEN:', process.env.PAYMENT_PROVIDER_TOKEN ? '–ó–∞–≥—Ä—É–∂–µ–Ω' : '–ù–ï –ó–ê–ì–†–£–ñ–ï–ù');


mongoose.set('bufferCommands', false);

// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
const buySubscriptionKeyboard: InlineKeyboardMarkup = {
    inline_keyboard: [
        [{ text: '–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –º–µ—Å—è—Ü (1000 —Ä—É–±)', callback_data: 'buy_subscription_1_month' }]
    ]
}

const TRAINER_USERNAME = '@nashamasha00';

const startBot = (bot: TelegramBot) => {
    console.log('ü§ñ Bot is ready')

    bot.onText(/\/start/, async (msg) => {
        const chatId = msg.chat.id;
        const user = await User.findOne({ chatId });

        let welcomeMessage = '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –ø–æ –ø–ª–∞–≤–∞–Ω–∏—é SwimCoach.\n';

        if (user && user.premium && user.premiumUntil && user.premiumUntil > new Date()) {
            welcomeMessage += `–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${user.premiumUntil.toLocaleDateString('ru-RU')}. –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /plan, /advice –∏ /done.`
        } else {
            welcomeMessage += `–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ —Å–æ–≤–µ—Ç—ã, —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏ –µ–µ, –∏ —è –¥–∞–º —Ç–µ–±–µ –∫–æ–Ω—Ç–∞–∫—Ç —Ç–≤–æ–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ ${TRAINER_USERNAME}!\n\n`;
            welcomeMessage += `–¶–µ–Ω–∞: 1000 —Ä—É–±/–º–µ—Å—è—Ü.`;
        }

        await bot.sendMessage(
            chatId,
            welcomeMessage,
            { reply_markup: user && user.premium ? undefined : buySubscriptionKeyboard }
        );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
    bot.on('callback_query', async (query) => {
        const chatId = query.message?.chat.id;
        if (!chatId) return;

        if (query.data === 'buy_subscription_1_month') {
            const price = 100000;
            const title = '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü SwimCoach';
            const description = '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–ª–∞–≤–∞–Ω–∏—é –Ω–∞ 1 –º–µ—Å—è—Ü.';
            const payload = 'swimcoach_1_month_subscription';
            const currency = 'RUB';

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            const paymentProviderToken = process.env.PAYMENT_PROVIDER_TOKEN;
            if (!paymentProviderToken) {
                console.error('PAYMENT_PROVIDER_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env');
                return bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }

            try {
                // –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç
                await bot.sendInvoice(
                    chatId,
                    title,
                    description,
                    payload,
                    paymentProviderToken,
                    'unique-start-parameter',
                    [
                        { label: '1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏', amount: price }
                    ],
                    {
                        need_name: true,
                        need_phone_number: false,
                        need_email: false,
                        need_shipping_address: false,
                        is_flexible: false,
                        // provider_data: {} // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                    }
                );
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–µ—Ç–∞:', error);
                bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        }
    });

    // –û–ë–†–ê–ë–û–¢–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô

    bot.on('pre_checkout_query', async (query) => {
        try {
            // –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞:
            await bot.answerPreCheckoutQuery(query.id, true);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ pre_checkout_query:', error);
            await bot.answerPreCheckoutQuery(query.id, false, { error_message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –æ–ø–ª–∞—Ç–µ.' });
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    bot.on('successful_payment', async (msg) => {
        const chatId = msg.chat.id;
        const totalAmount = msg.successful_payment?.total_amount;
        const currency = msg.successful_payment?.currency;
        const invoicePayload = msg.successful_payment?.invoice_payload;

        console.log(`üéâ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç ${chatId}! –°—É–º–º–∞: ${totalAmount} ${currency}. Payload: ${invoicePayload}`);

        try {
            let user = await User.findOne({ chatId });
            if (!user) {
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (—á—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã), —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                user = new User({ chatId });
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
            user.premium = true;
            const now = new Date();
            user.premiumUntil = new Date(now.setMonth(now.getMonth() + 1)); // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü

            // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞, –º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω —Å—Ä–∞–∑—É
            if (user.plan.length === 0) {
                // –í–∞–∂–Ω–æ: generatePlan —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç AI-–ø–ª–∞–Ω
                user.plan = await generatePlan(user.goal || '–æ–±—â–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞', '–Ω–æ–≤–∏—á–æ–∫');
            }

            await user.save();

            // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.sendMessage(
                chatId,
                `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${user.premiumUntil.toLocaleDateString('ru-RU')}.`
            );
            await bot.sendMessage(
                chatId,
                `–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∏ —Å–æ–≤–µ—Ç–∞–º. –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä: ${TRAINER_USERNAME}. –ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É, —á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏!`
            );
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã:', err);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
        }
    });

    // ----- –ó–ê–©–ò–©–ï–ù–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ü–†–ï–ú–ò–£–ú-–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô -----

    const checkPremium = async (chatId: number): Promise<boolean> => {
        const user = await User.findOne({ chatId });
        if (!user || !user.premium || !user.premiumUntil || user.premiumUntil <= new Date()) {
            bot.sendMessage(chatId, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.');
            return false;
        }
        return true;
    }

    bot.onText(/\/plan/, async (msg) => {
        const chatId = msg.chat.id;
        if (!await checkPremium(chatId)) return;

        try {
            const user = await User.findOne({ chatId: msg.chat.id })
            if (!user) { // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —Ö–æ—Ç—è checkPremium —É–∂–µ –µ–µ —Å–¥–µ–ª–∞–ª
                return bot.sendMessage(msg.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
            }

            // –ï—Å–ª–∏ –ø–ª–∞–Ω –µ—â–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –ø—Ä–µ–º–∏—É–º, –Ω–æ –Ω–µ –≤—ã–±—Ä–∞–ª —Ü–µ–ª—å)
            if (user.plan.length === 0) {
                user.plan = await generatePlan(user.goal || '–æ–±—â–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞', '–Ω–æ–≤–∏—á–æ–∫');
                await user.save();
            }

            const resp = '–¢–≤–æ—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ 4 –Ω–µ–¥–µ–ª–∏:\n' +
                user.plan.map((d, i) => `${i + 1}. ${d}`).join('\n')
            bot.sendMessage(msg.chat.id, resp)
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞:', err)
            bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        }
    })

    bot.onText(/\/done/, async (msg) => {
        const chatId = msg.chat.id;
        if (!await checkPremium(chatId)) return;

        try {
            const user = await User.findOne({ chatId: msg.chat.id })
            if (!user) return bot.sendMessage(msg.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');

            user.dayIndex++
            await user.save()
            bot.sendMessage(msg.chat.id, `–û—Ç–ª–∏—á–Ω–æ! –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª ${user.dayIndex} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.`)
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', err)
            bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        }
    })

    bot.onText(/\/advice/, async (msg) => {
        const chatId = msg.chat.id;
        if (!await checkPremium(chatId)) return;

        try {
            const tip = await createAdvice()
            bot.sendMessage(chatId, `–°–æ–≤–µ—Ç –¥–Ω—è: ${tip}`)
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–∞:', err)
            bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        }
    })

    // –ö—Ä–æ–Ω-–∑–∞–¥–∞—á–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cron.schedule('0 9 * * *', async () => {
        try {
            const users = await User.find({ premium: true, premiumUntil: { $gt: new Date() } }) // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            for (const u of users) {
                const training = u.plan[u.dayIndex] || '–û—Ç–¥—ã—Ö'
                bot.sendMessage(u.chatId, `–ü—Ä–∏–≤–µ—Ç! –¢–≤–æ—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${training}`)
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', err)
        }
    })
}

mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/defaultDB', {
    serverSelectionTimeoutMS: 5000,
    maxPoolSize: 20,
})
    .then(() => {
        console.log('‚úÖ MongoDB connected')

        const bot = new TelegramBot(process.env.TG_TOKEN || '', { polling: true })

        setupCommands(bot)
        startBot(bot)
    })
    .catch(err => console.error('‚ùå Mongo connection error:', err))