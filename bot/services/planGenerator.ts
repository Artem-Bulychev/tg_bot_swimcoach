import { OpenAI } from 'openai';

const OPENAI_KEY = process.env.OPENAI_KEY;

if (!OPENAI_KEY) {
    console.error('❌ OPENAI_KEY не найден в переменных окружения. Убедитесь, что он установлен в .env файле.');
    process.exit(1);
}

const openai = new OpenAI({ apiKey: OPENAI_KEY });

export async function generatePlan(goal: string, level: string): Promise<string[]> {
    const prompt = `Ты профессиональный тренер по плаванию. Твоя задача — составить подробный 4-недельный план тренировок для пользователя с целью "${goal}" и уровнем подготовки "${level}".
    Каждый день плана должен содержать описание тренировки (например, "Отдых", "Разминка 200м, 4x50м (темп), 300м заминка").
    План должен быть представлен в виде нумерованного списка, где каждый пункт — это один день тренировки. Всего должно быть 28 пунктов (4 недели по 7 дней).
    Обязательно включи дни отдыха. Используй метры для дистанций.
    Пример формата пункта: "1. Отдых" или "2. Разминка 200м, 4х50м (техника брасс), 100м заминка".
    `
    // Отправляем запрос в OpenAI
    try {
        const chatCompletion = await openai.chat.completions.create({
            messages: [
                { role: 'system', content: 'Ты - тренер по плаванию, который генерирует индивидуальные планы тренировок.' },
                { role: 'user', content: prompt },
            ],
            model: 'gpt-4o',
            temperature: 0.7, // Немного разнообразия в ответах
            max_tokens: 1500, // Увеличиваем лимит токенов для длинного плана
        });

        const planText = chatCompletion.choices[0].message.content;

        if (!planText) {
            console.error('AI не сгенерировал план.');
            return ['Ошибка генерации плана.'];
        }
        // Парсим полученный текст в массив строк
        const planLines = planText.split('\n')
            .filter(line => line.match(/^\d+\.\s/)) // Фильтруем строки, начинающиеся с "ЧИСЛО. "
            .map(line => line.replace(/^\d+\.\s*/, '').trim()); // Удаляем номера и пробелы

        while (planLines.length < 28) {
            planLines.push('Отдых или доработка плана'); // Заполняем оставшиеся дни заглушками
        }
        return planLines.slice(0, 28); // Обрезаем до 28 дней, если получилось больше
    } catch (error) {
        console.error('Ошибка при генерации плана с помощью AI:', error);
        return [
            'Отдых', 'Плавание 500м (легкий темп)', 'Плавание 700м (средний темп)',
            'Техника 30 мин', 'Плавание 800м (интервалы)', 'Отдых', 'Плавание 1000м (длинная дистанция)',
            'Отдых', 'Плавание 600м (легкий темп)', 'Плавание 900м (средний темп)',
            'Техника 30 мин', 'Плавание 1000м (интервалы)', 'Отдых', 'Плавание 1200м (длинная дистанция)',
            'Отдых', 'Плавание 700м (легкий темп)', 'Плавание 1000м (средний темп)',
            'Техника 40 мин', 'Плавание 1200м (интервалы)', 'Отдых', 'Плавание 1500м (длинная дистанция)',
            'Отдых', 'Плавание 800м (легкий темп)', 'Плавание 1200м (средний темп)',
            'Техника 40 мин', 'Плавание 1500м (интервалы)', 'Отдых', 'Плавание 2000м (длинная дистанция)'
        ];
    }
}